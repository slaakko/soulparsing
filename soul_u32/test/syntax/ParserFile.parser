// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

[cpp]#include <soul_u32/parsing/Namespace.hpp>
[cpp]#include <soul_u32/parsing/Grammar.hpp>
[cpp]#include <soul_u32/code/Declaration.hpp>
[hpp]#include <soul_u32/syntax/ParserFileContent.hpp>
[cpp]#include <soul_u32/syntax/Element.hpp>
[cpp]#include <soul_u32/syntax/Grammar.hpp>

namespace soul.syntax
{
    grammar ParserFileGrammar
    {
        using stdlib.spaces_and_comments;
        using stdlib.newline;
        using stdlib.qualified_id;
        using GrammarGrammar.Grammar;
        using soul.code.DeclarationGrammar.UsingDeclaration;
        using soul.code.DeclarationGrammar.UsingDirective;
        using soul.code.DeclarationGrammar.NamespaceAliasDefinition;

        skip spaces_and_comments;

        ParserFile(int id_, soul::parsing::ParsingDomain* parsingDomain_): ParserFileContent*
                    ::= empty{ value = new ParserFileContent(id_, parsingDomain_); value->SetFilePath(fileName); }
                        IncludeDirectives(value)?
                        NamespaceContent(value)
                    ;

        IncludeDirectives(ParserFileContent* parserFileContent)
                    ::= IncludeDirective(parserFileContent)+
                    ;

        IncludeDirective(ParserFileContent* parserFileContent)
                    ::= FileAttribute? '#' keyword("include") token(IncludeFileName [^\r\n]* newline){ parserFileContent->AddIncludeDirective(ToUtf8(IncludeFileName), ToUtf8(FileAttribute)); }
                    ;

        FileAttribute: std::u32string
                    ::= '[' ("cpp" | "hpp"){ value = std::u32string(matchBegin, matchEnd); } ']'
                    ;

        IncludeFileName: std::u32string
                    ::= token('<' [^>\r\n]+ '>'){ value = std::u32string(matchBegin, matchEnd); }
                    ;

        NamespaceContent(ParserFileContent* parserFileContent)
                    ::= 
                    (   
                        FileAttribute? 
                        (   UsingDeclaration{ UsingDeclaration->SetFileAttr(FileAttribute); parserFileContent->AddUsingObject(UsingDeclaration); }
                        |   UsingDirective{ UsingDirective->SetFileAttr(FileAttribute); parserFileContent->AddUsingObject(UsingDirective); }
                        |   NamespaceAliasDefinition{ NamespaceAliasDefinition->SetFileAttr(FileAttribute); parserFileContent->AddUsingObject(NamespaceAliasDefinition); }
                        )
                    |   Grammar(parserFileContent->CurrentScope()){ parserFileContent->AddGrammar(Grammar); }
                    |   Namespace(parserFileContent)
                    )*
                    ;

        Namespace(ParserFileContent* parserFileContent)
                    ::= keyword("namespace") qualified_id:ns!{ parserFileContent->BeginNamespace(ns); }
                        '{'!
                        NamespaceContent(parserFileContent)
                        '}'!{ parserFileContent->EndNamespace(); }
                    ;
    }
}
